# Задание №3
# Создайте класс с базовым исключением и дочерние классыисключения:
# ○ ошибка уровня,
# ○ ошибка доступа.
#
#
# Создайте класс с базовым исключением и дочерние классы-исключения:
# ошибка уровня,
# ошибка доступа.
# Вспомните задачу из семинара 8 про сериализацию данных, где в бесконечном цикле запрашивали имя, личный идентификатор и уровень доступа (от 1 до 7).
# Напишите класс пользователя, который хранит эти данные в свойствах экземпляра.
# Реализуйте магический метод проверки на равенство пользователей

# Доработаем задачи 3 и 4. Создайте класс Project, содержащий атрибуты – список пользователей проекта и админ проекта. Класс имеет следующие методы:
# Классовый метод загрузки данных из JSON файла (из второй задачи 8 семинара)
# Метод входа в систему – требует указать имя и id пользователя. Далее метод создает пользователя и проверяет есть ли он в списке пользователей проекта. Если в списке его нет, то вызывается исключение доступа. Если пользователь присутствует в списке пользователей проекта, то пользователь, который входит получает его уровень доступа и становится администратором.
# Метод добавление пользователя в список пользователей. Если уровень пользователя меньше, чем уровень админа, вызывайте исключение уровня доступа.
# * метод удаления пользователя из списка пользователей проекта
# * метод сохранения списка пользователей в JSON файл при выходе из контекстного менеджера



class User:
    def __init__(self, name, id_, level):
        self.name = name
        self.id_ = id_
        self.level = level

    def __eq__(self, other):
        if isinstance(other, User):
            return self.name == other.name and self.id_ == other.id_ and self.level == other.level
        return False

    def __repr__(self):
        return f"User(name={self.name}, id_={self.id_}, level={self.level})"

    def get_user_info(self, cnt=1):
        names = []
        ids = []
        levels = []

        for _ in range(cnt):
            name = input("Введите имя: ")
            id_ = input("Введите ID: ")
            level = input("Введите уровень доступа: ")

            names.append(name)
            ids.append(id_)
            levels.append(level)

        return names, ids, levels
